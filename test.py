import datetime
import dateutil
from dateutil import parser
import requests
#from pprint import pprint
from bs4 import BeautifulSoup
import urllib.parse
import tldextract
import re
import sys
import json


def scan(url):
    page = requests.get(url)
    soup = BeautifulSoup(page.content, "html.parser")
    tables = soup.find_all("div", {"class": "table parbase section"})


    cpe_list=[]
    bulletinDetails=[]
    vulList=[]
    vendor_output = ""
    product_output = ""
    startVersion = None
    endVersion = None

    for table_no, table in enumerate(tables):
        "<tr> tag defines a row in an HTML table."
        rows = table.find_all('tr')
        for row in rows:
            "<td> tag defines a standard data cell in an HTML table"
            cells = row.find_all('td')
            cells = [x.text.strip() for x in cells]
            if table_no == 0:
                """
                Parsing Bulletin Details.
                """
                bulletinDetails.append(cells)

            elif table_no == 1:
                """
                Parsing Affected Versions.
                """
                try:
                    vendor= cells[0].lower().split(" ")[0]
                    product = cells[0].lower().replace(vendor,"").strip()
                    vendor_output = vendor
                    product_output = product
                    splitCells = cells[1].lower().split()
                    cpe_dict={
                        "vendor": vendor,
                        "product": product,
                        "category": "a"
                    }
                    if splitCells[1] and splitCells[1] != "and":
                        startVersion = splitCells[-1]
                        cpe_dict["versionStartIncluding"] = startVersion
                    endVersion = splitCells[0]
                    cpe_dict["versionEndIncluding"] = endVersion
                    cpe_list.append(cpe_dict)
                except:
                    continue
            elif table_no == 3:
                """
                Parsing Vulnerablity Details.
                """
                vulList.append(cells)

    dateDetails = bulletinDetails[1][1]
    publishedDate = parser.parse(dateDetails).isoformat()

    cve_list = []


    CVE_index = [(vulList[0].index(x)) for x in vulList[0] if "CVE" in x]
    Vul_Cat = [(vulList[0].index(x)) for x in vulList[0] if "Vulnerability Category" in x]

    startVersionList = []

    for vul in vulList[1:]:
        #startVersionList.append(vul[4].split()[1])
        i = 0
        if startVersion:
            startVersion = vul[4].split()[1]
            
            cpe_list[0]["versionStartIncluding"] = startVersion
            
            #cpe_dict["versionStartIncluding"] = startVersion
            
        #print(cve_list)
        #print(cpe_list)    
        now = datetime.datetime.now()
        timestamp = now.isoformat()

        description = vul[Vul_Cat[0]]

        id = vul[CVE_index[0]]
        name = product_output         
        cve = {
            "timestamp": str(timestamp),
            "published_date": str(publishedDate),
            "id" : str(id),
            "url" : str(url),
            "name" : name,
            "description": str(description).lower(),
            "cpes": {
                "cpe_list" : cpe_list
            }
        }
        cve_list.append(cve)
        #print(cve)
    print(cve_list)    
        #if startVersion:
            #cve_list[i]['cpes']['cpe_list'][0].update({'versionStartIncluding': startVersionList[i]})
            #i+=1
    """
    if startVersion:
        #print(len(cve_list))
        for i in range(len(cve_list)):
            print(cve_list[i]['cpes']['cpe_list'])
            #print(startVersionList[i])
            #cve_list[i]['cpes']['cpe_list'][0]['versionStartIncluding'] = startVersionList[i]
            cve_list[i]['cpes']['cpe_list'][0].update({'versionStartIncluding': startVersionList[i]})
            #print((cve_list[i]['cpes']['cpe_list'][0]['versionStartIncluding'], startVersionList[i]))
            #print(startVersionList[i])
    """
    #if startVersion:
        #for elem in cve_list:

    
    #print(len(cve_list))
    #for i in range(len(cve_list)):
        #print((cve_list[i]['cpes']['cpe_list'][0]['versionStartIncluding'], startVersionList[i]))
        #cve_list[i]['cpes']['cpe_list'][0]['versionStartIncluding'] = startVersionList[i]
        #print(startVersionList[i])
    

    ext = tldextract.extract(url)
    #print(ext)
    source = ext.domain            
    typ = "vendor"
    jsonOutput = {
        "source" : source,
        "type" : typ,
        "cves" : cve_list
    }

    outputFile = open('output.json', 'w')
    outputFile.write(json.dumps(jsonOutput, indent=4))
    outputFile.close()

    return jsonOutput

if __name__ == "__main__":

    inp_url = sys.argv[1]

    url = inp_url
    scan(url)